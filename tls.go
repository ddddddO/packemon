package packemon

import "bytes"

// Wiresharkで curl https://github.com 実行後の client hello を覗いて
type TLSClientHello struct {
	ContentType uint8
	HVersion    uint16 // TODO: rename.下も
	HLength     uint16

	HandshakeType uint8

	// Length uint32 // Wireshrk上だと24bit
	Length []byte

	Version                  uint16
	Random                   []byte // 32byte
	SessionIDLength          uint8
	SessionID                []byte // 32byte
	CipherSuitesLength       uint16
	CipherSuites             []byte // 62byte
	CompressionMethodsLength uint8
	CompressionMethods       uint8

	ExtensionsLength uint16
}

const TLS_HANDSHAKE = 0x16 // 22. handshake

const (
	TLS_VERSION_1_0 = 0x0301
	TLS_VERSION_1_2 = 0x0303
)

const TLS_HANDSHAKE_TYPE_CLIENT_HELLO = 0x01

func NewTLSClientHello() *TLSClientHello {
	clientHello := &TLSClientHello{
		ContentType:   TLS_HANDSHAKE,
		HVersion:      TLS_VERSION_1_0,
		HLength:       0x0200,
		HandshakeType: TLS_HANDSHAKE_TYPE_CLIENT_HELLO,
		// Length: 0x0001fc,
		Length:             []byte{0x00, 0x00, 0x00},
		Version:            TLS_VERSION_1_2,
		Random:             []byte{0x2b, 0x57, 0xb8, 0x4e, 0x02, 0xe6, 0xb3, 0xae, 0x64, 0x07, 0xb8, 0xf9, 0xf2, 0xc5, 0xc1, 0x23, 0xc4, 0x44, 0x9c, 0xa3, 0x58, 0xeb, 0x8c, 0x02, 0xbb, 0x0f, 0x4c, 0x5a, 0x68, 0xcb, 0xc9, 0xf6},
		SessionIDLength:    0x20,
		SessionID:          []byte{0x8f, 0x2e, 0xec, 0x3b, 0x53, 0x3b, 0xf8, 0x19, 0xbf, 0x2d, 0x37, 0x99, 0x8f, 0x4b, 0x76, 0xbe, 0x9c, 0xc3, 0xa3, 0x54, 0x0d, 0x66, 0xe4, 0xe4, 0x60, 0xe9, 0xf2, 0x9b, 0xc7, 0x13, 0x8e, 0x3a},
		CipherSuitesLength: 0x0002,
		// CipherSuites: []byte{0x13, 0x02 , 0x13 , 0x03 , 0x13 , 0x01 , 0xc0 , 0x2c , 0xc0 , 0x30 , 0x00 , 0x9f , 0xcc , 0xa9 , 0xcc , 0xa8 , 0xcc , 0xaa , 0xc0 , 0x2b , 0xc0 , 0x2f , 0x00 , 0x9e , 0xc0 , 0x24 , 0xc0 , 0x28 , 0x00 , 0x6b , 0xc0 , 0x23 , 0xc0 , 0x27 , 0x00 , 0x67 , 0xc0 , 0x0a , 0xc0 , 0x14 , 0x00 , 0x39 , 0xc0 , 0x09 , 0xc0 , 0x13 , 0x00 , 0x33 , 0x00 , 0x9d , 0x00 , 0x9c , 0x00 , 0x3d , 0x00 , 0x3c , 0x00 , 0x35 , 0x00 , 0x2f , 0x00 , 0xff},
		CipherSuites:             []byte{0x00, 0x9c},
		CompressionMethodsLength: 0x01,
		CompressionMethods:       0x00,
		ExtensionsLength:         0x0001,
	}

	return clientHello
}

func (t *TLSClientHello) Bytes() []byte {
	buf := &bytes.Buffer{}
	buf.WriteByte(t.ContentType)
	WriteUint16(buf, t.HVersion)
	WriteUint16(buf, t.HLength)
	buf.WriteByte(t.HandshakeType)
	buf.Write(t.Length)
	WriteUint16(buf, t.Version)
	buf.Write(t.Random)
	buf.WriteByte(t.SessionIDLength)
	buf.Write(t.SessionID)
	WriteUint16(buf, t.CipherSuitesLength)
	buf.Write(t.CipherSuites)
	buf.WriteByte(t.CompressionMethodsLength)
	buf.WriteByte(t.CompressionMethods)
	WriteUint16(buf, t.ExtensionsLength)

	return buf.Bytes()
}
